
Blink_Toggle_Debounce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054d  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b3  00000000  00000000  000006dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	3b c0       	rjmp	.+118    	; 0xac <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>


int main(void)
{
    DDRD =0xff;		//set direction for PORTD to all outputs
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xff;	//set direction for PORTC to all inputs
  3c:	84 bb       	out	0x14, r24	; 20
	PORTD = 0x01;	//set all LED's off except bit 0 which is on
  3e:	91 e0       	ldi	r25, 0x01	; 1
  40:	92 bb       	out	0x12, r25	; 18
	PORTC = 0xff;	//activate internal pull ups on inputs
  42:	85 bb       	out	0x15, r24	; 21
	
	int Pressed = 0;
	int Pressed_Confidence_Level = 0;	//Measure button press confidence
	int Released_Confidence_Level = 0;	//Measure button release confidence
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
	DDRC = 0xff;	//set direction for PORTC to all inputs
	PORTD = 0x01;	//set all LED's off except bit 0 which is on
	PORTC = 0xff;	//activate internal pull ups on inputs
	
	int Pressed = 0;
	int Pressed_Confidence_Level = 0;	//Measure button press confidence
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	30 e0       	ldi	r19, 0x00	; 0
    DDRD =0xff;		//set direction for PORTD to all outputs
	DDRC = 0xff;	//set direction for PORTC to all inputs
	PORTD = 0x01;	//set all LED's off except bit 0 which is on
	PORTC = 0xff;	//activate internal pull ups on inputs
	
	int Pressed = 0;
  4c:	40 e0       	ldi	r20, 0x00	; 0
  4e:	50 e0       	ldi	r21, 0x00	; 0
		else
		{
			Released_Confidence_Level ++; // This works just like the pressed
			if (Released_Confidence_Level >500)
				{
				Pressed = 0;
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	60 e0       	ldi	r22, 0x00	; 0
		Released_Confidence_Level = 0; // Reset released button confidence since there is a button press
		if (Pressed_Confidence_Level >500) //Indicator of a good button press
			{
				if (Pressed == 0)
				{
					PORTD ^= 1 << PIND0;
  54:	b1 e0       	ldi	r27, 0x01	; 1
					PORTD ^= 1 << PIND1;
  56:	a2 e0       	ldi	r26, 0x02	; 2
					Pressed = 1;
  58:	f1 e0       	ldi	r31, 0x01	; 1
  5a:	e0 e0       	ldi	r30, 0x00	; 0
  5c:	07 c0       	rjmp	.+14     	; 0x6c <__SREG__+0x2d>
    while (1) 
    {
		if (bit_is_clear(PINC, 0))  //check if button 1 (PORTC bit 0) pushed
		{
		Pressed_Confidence_Level ++; // Increase pressed confidence
		Released_Confidence_Level = 0; // Reset released button confidence since there is a button press
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	04 c0       	rjmp	.+8      	; 0x6c <__SREG__+0x2d>
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
				{
					PORTD ^= 1 << PIND0;
					PORTD ^= 1 << PIND1;
					Pressed = 1;
				}
			Pressed_Confidence_Level = 0;	//Zero it so a new pressed condition can be evaluated
  68:	20 e0       	ldi	r18, 0x00	; 0
  6a:	30 e0       	ldi	r19, 0x00	; 0
	int Pressed_Confidence_Level = 0;	//Measure button press confidence
	int Released_Confidence_Level = 0;	//Measure button release confidence
	
    while (1) 
    {
		if (bit_is_clear(PINC, 0))  //check if button 1 (PORTC bit 0) pushed
  6c:	98 99       	sbic	0x13, 0	; 19
  6e:	16 c0       	rjmp	.+44     	; 0x9c <__SREG__+0x5d>
		{
		Pressed_Confidence_Level ++; // Increase pressed confidence
  70:	2f 5f       	subi	r18, 0xFF	; 255
  72:	3f 4f       	sbci	r19, 0xFF	; 255
		Released_Confidence_Level = 0; // Reset released button confidence since there is a button press
		if (Pressed_Confidence_Level >500) //Indicator of a good button press
  74:	25 3f       	cpi	r18, 0xF5	; 245
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	38 07       	cpc	r19, r24
  7a:	8c f3       	brlt	.-30     	; 0x5e <__SREG__+0x1f>
			{
				if (Pressed == 0)
  7c:	41 15       	cp	r20, r1
  7e:	51 05       	cpc	r21, r1
  80:	89 f7       	brne	.-30     	; 0x64 <__SREG__+0x25>
				{
					PORTD ^= 1 << PIND0;
  82:	82 b3       	in	r24, 0x12	; 18
  84:	8b 27       	eor	r24, r27
  86:	82 bb       	out	0x12, r24	; 18
					PORTD ^= 1 << PIND1;
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	8a 27       	eor	r24, r26
  8c:	82 bb       	out	0x12, r24	; 18
    while (1) 
    {
		if (bit_is_clear(PINC, 0))  //check if button 1 (PORTC bit 0) pushed
		{
		Pressed_Confidence_Level ++; // Increase pressed confidence
		Released_Confidence_Level = 0; // Reset released button confidence since there is a button press
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
				{
					PORTD ^= 1 << PIND0;
					PORTD ^= 1 << PIND1;
					Pressed = 1;
				}
			Pressed_Confidence_Level = 0;	//Zero it so a new pressed condition can be evaluated
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
			{
				if (Pressed == 0)
				{
					PORTD ^= 1 << PIND0;
					PORTD ^= 1 << PIND1;
					Pressed = 1;
  96:	4f 2f       	mov	r20, r31
  98:	5e 2f       	mov	r21, r30
  9a:	e8 cf       	rjmp	.-48     	; 0x6c <__SREG__+0x2d>
			Pressed_Confidence_Level = 0;	//Zero it so a new pressed condition can be evaluated
			}
		}
		else
		{
			Released_Confidence_Level ++; // This works just like the pressed
  9c:	01 96       	adiw	r24, 0x01	; 1
			if (Released_Confidence_Level >500)
  9e:	85 3f       	cpi	r24, 0xF5	; 245
  a0:	c1 e0       	ldi	r28, 0x01	; 1
  a2:	9c 07       	cpc	r25, r28
  a4:	1c f3       	brlt	.-58     	; 0x6c <__SREG__+0x2d>
				{
				Pressed = 0;
  a6:	47 2f       	mov	r20, r23
  a8:	56 2f       	mov	r21, r22
  aa:	e0 cf       	rjmp	.-64     	; 0x6c <__SREG__+0x2d>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
