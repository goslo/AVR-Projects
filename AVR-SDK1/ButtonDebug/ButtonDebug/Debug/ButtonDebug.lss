
ButtonDebug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000067d  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000578  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f3  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008c  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6d d0       	rcall	.+218    	; 0x11e <main>
  44:	77 c0       	rjmp	.+238    	; 0x134 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ProcessPressedButton>:
     }
}

void ProcessPressedButton()
{
	Pressed_Confidence_Level ++;
  48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Pressed_Confidence_Level>
  4c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Pressed_Confidence_Level+0x1>
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Pressed_Confidence_Level+0x1>
  56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Pressed_Confidence_Level>
	if (Pressed_Confidence_Level > 500);
	Released_Confidence_Level = 0;			// Reset released button confidence since there is a button press
  5a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  5e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	{
		if (Pressed == 0)
  62:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Pressed>
  66:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Pressed+0x1>
  6a:	89 2b       	or	r24, r25
  6c:	f1 f5       	brne	.+124    	; 0xea <ProcessPressedButton+0xa2>
		{
		Pressed = 1;
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Pressed+0x1>
  76:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Pressed>
		PORTD |= 1 << LEDNumber;			//turn on Bits for LED's in ascending order
  7a:	22 b3       	in	r18, 0x12	; 18
  7c:	00 90 64 00 	lds	r0, 0x0064	; 0x800064 <LEDNumber>
  80:	02 c0       	rjmp	.+4      	; 0x86 <ProcessPressedButton+0x3e>
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	0a 94       	dec	r0
  88:	e2 f7       	brpl	.-8      	; 0x82 <ProcessPressedButton+0x3a>
  8a:	82 2b       	or	r24, r18
  8c:	82 bb       	out	0x12, r24	; 18
		LEDNumber ++;
  8e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <LEDNumber>
  92:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <LEDNumber+0x1>
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <LEDNumber+0x1>
  9c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <LEDNumber>
		if (LEDNumber > 7)					//have all LED's been switched on?
  a0:	08 97       	sbiw	r24, 0x08	; 8
  a2:	1c f1       	brlt	.+70     	; 0xea <ProcessPressedButton+0xa2>
			{	
			for (i=0;i < 10;i++)			//loop to flash all LED's 10 times
  a4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <i+0x1>
  a8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i>
				{
				PORTD = 0x00;				//start of flash all LED's routine
				_delay_ms(10);
				PORTD = 0xff;
  ac:	2f ef       	ldi	r18, 0xFF	; 255
		LEDNumber ++;
		if (LEDNumber > 7)					//have all LED's been switched on?
			{	
			for (i=0;i < 10;i++)			//loop to flash all LED's 10 times
				{
				PORTD = 0x00;				//start of flash all LED's routine
  ae:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	97 e2       	ldi	r25, 0x27	; 39
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <ProcessPressedButton+0x6c>
  b8:	00 c0       	rjmp	.+0      	; 0xba <ProcessPressedButton+0x72>
  ba:	00 00       	nop
				_delay_ms(10);
				PORTD = 0xff;
  bc:	22 bb       	out	0x12, r18	; 18
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	97 e2       	ldi	r25, 0x27	; 39
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <ProcessPressedButton+0x7a>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <ProcessPressedButton+0x80>
  c8:	00 00       	nop
		Pressed = 1;
		PORTD |= 1 << LEDNumber;			//turn on Bits for LED's in ascending order
		LEDNumber ++;
		if (LEDNumber > 7)					//have all LED's been switched on?
			{	
			for (i=0;i < 10;i++)			//loop to flash all LED's 10 times
  ca:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <i>
  ce:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <i+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <i+0x1>
  d8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <i>
  dc:	0a 97       	sbiw	r24, 0x0a	; 10
  de:	3c f3       	brlt	.-50     	; 0xae <ProcessPressedButton+0x66>
				PORTD = 0x00;				//start of flash all LED's routine
				_delay_ms(10);
				PORTD = 0xff;
				_delay_ms(10);		
				}
				LEDNumber = 0;				//reset LED counter
  e0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <LEDNumber+0x1>
  e4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <LEDNumber>
				PORTD = 0x00;				//turn off all LED's
  e8:	12 ba       	out	0x12, r1	; 18
			}
		}
	}
		Pressed_Confidence_Level = 0;	
  ea:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Pressed_Confidence_Level+0x1>
  ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Pressed_Confidence_Level>
  f2:	08 95       	ret

000000f4 <ProcessReleasedButton>:
}

void ProcessReleasedButton()
{
	Released_Confidence_Level ++;
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 102:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (Released_Confidence_Level > 500)
 106:	85 3f       	cpi	r24, 0xF5	; 245
 108:	91 40       	sbci	r25, 0x01	; 1
 10a:	44 f0       	brlt	.+16     	; 0x11c <ProcessReleasedButton+0x28>
	{
		Pressed = 0;
 10c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Pressed+0x1>
 110:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Pressed>
		Released_Confidence_Level = 0;
 114:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 118:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 11c:	08 95       	ret

0000011e <main>:
int Released_Confidence_Level = 0;	//Measure button release confidence
 
int main(void)
{
    //Initialization area. Setting up ports and data direction
	DDRC &= ~(1<<0);	//set Bit 0 for input
 11e:	a0 98       	cbi	0x14, 0	; 20
	PORTC |= (1<<0);	//activate Bit 0 internal pull up resistor
 120:	a8 9a       	sbi	0x15, 0	; 21
	DDRD = 0xff;	//set for all outputs
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;	//set output low -> turn all LEDs off
 126:	12 ba       	out	0x12, r1	; 18
	
		
    while (1) 
    {
		if ( ~PINC & (1<<0))			//read PINC Bit 0 to see if Switch 1 is pressed 
 128:	98 99       	sbic	0x13, 0	; 19
 12a:	02 c0       	rjmp	.+4      	; 0x130 <main+0x12>
		{
			ProcessPressedButton();		//Process button click
 12c:	8d df       	rcall	.-230    	; 0x48 <ProcessPressedButton>
 12e:	fc cf       	rjmp	.-8      	; 0x128 <main+0xa>
		}
		else
		{
			ProcessReleasedButton();	//Process button release
 130:	e1 df       	rcall	.-62     	; 0xf4 <ProcessReleasedButton>
 132:	fa cf       	rjmp	.-12     	; 0x128 <main+0xa>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
