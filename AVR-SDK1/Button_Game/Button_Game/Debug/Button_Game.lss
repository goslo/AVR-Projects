
Button_Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f0  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a3  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000392  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 37       	cpi	r26, 0x70	; 112
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	b0 d0       	rcall	.+352    	; 0x1a4 <main>
  44:	c9 c0       	rjmp	.+402    	; 0x1d8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ProcessPressedButton>:
     }
}

void ProcessPressedButton(int ButtonPressed)
{
	Pressed_Confidence_Level[ButtonPressed] ++;
  48:	fc 01       	movw	r30, r24
  4a:	ee 0f       	add	r30, r30
  4c:	ff 1f       	adc	r31, r31
  4e:	e8 59       	subi	r30, 0x98	; 152
  50:	ff 4f       	sbci	r31, 0xFF	; 255
  52:	20 81       	ld	r18, Z
  54:	31 81       	ldd	r19, Z+1	; 0x01
  56:	2f 5f       	subi	r18, 0xFF	; 255
  58:	3f 4f       	sbci	r19, 0xFF	; 255
  5a:	31 83       	std	Z+1, r19	; 0x01
  5c:	20 83       	st	Z, r18
	if (Pressed_Confidence_Level[ButtonPressed] > 500)
  5e:	25 3f       	cpi	r18, 0xF5	; 245
  60:	31 40       	sbci	r19, 0x01	; 1
  62:	0c f4       	brge	.+2      	; 0x66 <ProcessPressedButton+0x1e>
  64:	84 c0       	rjmp	.+264    	; 0x16e <ProcessPressedButton+0x126>
	{
	if (Pressed[ButtonPressed] == 0)
  66:	fc 01       	movw	r30, r24
  68:	ee 0f       	add	r30, r30
  6a:	ff 1f       	adc	r31, r31
  6c:	e4 59       	subi	r30, 0x94	; 148
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	20 81       	ld	r18, Z
  72:	31 81       	ldd	r19, Z+1	; 0x01
  74:	23 2b       	or	r18, r19
  76:	09 f0       	breq	.+2      	; 0x7a <ProcessPressedButton+0x32>
  78:	5b c0       	rjmp	.+182    	; 0x130 <ProcessPressedButton+0xe8>
		{
			Pressed[ButtonPressed] = 1;		
  7a:	fc 01       	movw	r30, r24
  7c:	ee 0f       	add	r30, r30
  7e:	ff 1f       	adc	r31, r31
  80:	e4 59       	subi	r30, 0x94	; 148
  82:	ff 4f       	sbci	r31, 0xFF	; 255
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	31 83       	std	Z+1, r19	; 0x01
  8a:	20 83       	st	Z, r18
			if (ButtonPressed == 0) PORTD |= 1 << LEDNumber[ButtonPressed];	//increment LED's
  8c:	00 97       	sbiw	r24, 0x00	; 0
  8e:	a9 f4       	brne	.+42     	; 0xba <ProcessPressedButton+0x72>
  90:	42 b3       	in	r20, 0x12	; 18
  92:	e4 e6       	ldi	r30, 0x64	; 100
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	00 80       	ld	r0, Z
  98:	02 c0       	rjmp	.+4      	; 0x9e <ProcessPressedButton+0x56>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <ProcessPressedButton+0x52>
  a2:	24 2b       	or	r18, r20
  a4:	22 bb       	out	0x12, r18	; 18
			if (ButtonPressed == 1) PORTB |= 1 << LEDNumber[ButtonPressed];	//increment LED's
			LEDNumber[ButtonPressed] ++;
  a6:	20 81       	ld	r18, Z
  a8:	31 81       	ldd	r19, Z+1	; 0x01
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
  ae:	31 83       	std	Z+1, r19	; 0x01
  b0:	20 83       	st	Z, r18
			if (LEDNumber[ButtonPressed] >6)
  b2:	27 30       	cpi	r18, 0x07	; 7
  b4:	31 05       	cpc	r19, r1
  b6:	94 f4       	brge	.+36     	; 0xdc <ProcessPressedButton+0x94>
  b8:	3b c0       	rjmp	.+118    	; 0x130 <ProcessPressedButton+0xe8>
	{
	if (Pressed[ButtonPressed] == 0)
		{
			Pressed[ButtonPressed] = 1;		
			if (ButtonPressed == 0) PORTD |= 1 << LEDNumber[ButtonPressed];	//increment LED's
			if (ButtonPressed == 1) PORTB |= 1 << LEDNumber[ButtonPressed];	//increment LED's
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	91 05       	cpc	r25, r1
  be:	09 f0       	breq	.+2      	; 0xc2 <ProcessPressedButton+0x7a>
  c0:	3f c0       	rjmp	.+126    	; 0x140 <ProcessPressedButton+0xf8>
  c2:	48 b3       	in	r20, 0x18	; 24
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	00 90 66 00 	lds	r0, 0x0066	; 0x800066 <LEDNumber+0x2>
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <ProcessPressedButton+0x8a>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <ProcessPressedButton+0x86>
  d6:	24 2b       	or	r18, r20
  d8:	28 bb       	out	0x18, r18	; 24
  da:	32 c0       	rjmp	.+100    	; 0x140 <ProcessPressedButton+0xf8>
		} 
     }
}

void ProcessPressedButton(int ButtonPressed)
{
  dc:	2a e0       	ldi	r18, 0x0A	; 10
  de:	30 e0       	ldi	r19, 0x00	; 0
					{
						if (ButtonPressed == 0) PORTD = 0x00;
						if (ButtonPressed == 1) PORTB = 0x00;
						_delay_ms(10);
						if (ButtonPressed == 0) PORTD = 0xff;
						if (ButtonPressed == 1) PORTB = 0xff;
  e0:	4f ef       	ldi	r20, 0xFF	; 255
			LEDNumber[ButtonPressed] ++;
			if (LEDNumber[ButtonPressed] >6)
				{	
				for (int i=0;i < 10;i++)
					{
						if (ButtonPressed == 0) PORTD = 0x00;
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	49 f4       	brne	.+18     	; 0xf8 <ProcessPressedButton+0xb0>
  e6:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	ef e0       	ldi	r30, 0x0F	; 15
  ea:	f7 e2       	ldi	r31, 0x27	; 39
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <ProcessPressedButton+0xa4>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <ProcessPressedButton+0xaa>
  f2:	00 00       	nop
						if (ButtonPressed == 1) PORTB = 0x00;
						_delay_ms(10);
						if (ButtonPressed == 0) PORTD = 0xff;
  f4:	42 bb       	out	0x12, r20	; 18
  f6:	0b c0       	rjmp	.+22     	; 0x10e <ProcessPressedButton+0xc6>
			if (LEDNumber[ButtonPressed] >6)
				{	
				for (int i=0;i < 10;i++)
					{
						if (ButtonPressed == 0) PORTD = 0x00;
						if (ButtonPressed == 1) PORTB = 0x00;
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 05       	cpc	r25, r1
  fc:	89 f5       	brne	.+98     	; 0x160 <ProcessPressedButton+0x118>
  fe:	18 ba       	out	0x18, r1	; 24
 100:	ef e0       	ldi	r30, 0x0F	; 15
 102:	f7 e2       	ldi	r31, 0x27	; 39
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <ProcessPressedButton+0xbc>
 108:	00 c0       	rjmp	.+0      	; 0x10a <ProcessPressedButton+0xc2>
 10a:	00 00       	nop
						_delay_ms(10);
						if (ButtonPressed == 0) PORTD = 0xff;
						if (ButtonPressed == 1) PORTB = 0xff;
 10c:	48 bb       	out	0x18, r20	; 24
 10e:	ef e0       	ldi	r30, 0x0F	; 15
 110:	f7 e2       	ldi	r31, 0x27	; 39
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <ProcessPressedButton+0xca>
 116:	00 c0       	rjmp	.+0      	; 0x118 <ProcessPressedButton+0xd0>
 118:	00 00       	nop
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	31 09       	sbc	r19, r1
			if (ButtonPressed == 0) PORTD |= 1 << LEDNumber[ButtonPressed];	//increment LED's
			if (ButtonPressed == 1) PORTB |= 1 << LEDNumber[ButtonPressed];	//increment LED's
			LEDNumber[ButtonPressed] ++;
			if (LEDNumber[ButtonPressed] >6)
				{	
				for (int i=0;i < 10;i++)
 11e:	09 f7       	brne	.-62     	; 0xe2 <ProcessPressedButton+0x9a>
						_delay_ms(10);
						if (ButtonPressed == 0) PORTD = 0xff;
						if (ButtonPressed == 1) PORTB = 0xff;
						_delay_ms(10);		
					}
				LEDNumber[0] = 0;
 120:	e4 e6       	ldi	r30, 0x64	; 100
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	11 82       	std	Z+1, r1	; 0x01
 126:	10 82       	st	Z, r1
				LEDNumber[1] = 0;
 128:	13 82       	std	Z+3, r1	; 0x03
 12a:	12 82       	std	Z+2, r1	; 0x02
				PORTD = 0x00;
 12c:	12 ba       	out	0x12, r1	; 18
				PORTB = 0x00;
 12e:	18 ba       	out	0x18, r1	; 24
				}
			}
		Pressed_Confidence_Level[ButtonPressed] = 0;	
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	fc 01       	movw	r30, r24
 136:	e8 59       	subi	r30, 0x98	; 152
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	11 82       	std	Z+1, r1	; 0x01
 13c:	10 82       	st	Z, r1
	}
}
 13e:	08 95       	ret
	if (Pressed[ButtonPressed] == 0)
		{
			Pressed[ButtonPressed] = 1;		
			if (ButtonPressed == 0) PORTD |= 1 << LEDNumber[ButtonPressed];	//increment LED's
			if (ButtonPressed == 1) PORTB |= 1 << LEDNumber[ButtonPressed];	//increment LED's
			LEDNumber[ButtonPressed] ++;
 140:	fc 01       	movw	r30, r24
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	ec 59       	subi	r30, 0x9C	; 156
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	20 81       	ld	r18, Z
 14c:	31 81       	ldd	r19, Z+1	; 0x01
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	31 83       	std	Z+1, r19	; 0x01
 154:	20 83       	st	Z, r18
			if (LEDNumber[ButtonPressed] >6)
 156:	27 30       	cpi	r18, 0x07	; 7
 158:	31 05       	cpc	r19, r1
 15a:	0c f0       	brlt	.+2      	; 0x15e <ProcessPressedButton+0x116>
 15c:	bf cf       	rjmp	.-130    	; 0xdc <ProcessPressedButton+0x94>
 15e:	e8 cf       	rjmp	.-48     	; 0x130 <ProcessPressedButton+0xe8>
 160:	ef e0       	ldi	r30, 0x0F	; 15
 162:	f7 e2       	ldi	r31, 0x27	; 39
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <ProcessPressedButton+0x11c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <ProcessPressedButton+0x122>
 16a:	00 00       	nop
 16c:	d0 cf       	rjmp	.-96     	; 0x10e <ProcessPressedButton+0xc6>
 16e:	08 95       	ret

00000170 <ProcessReleasedButton>:
	}
}

void ProcessReleasedButton(int ButtonReleased)
{
	Released_Confidence_Level[ButtonReleased] ++;
 170:	fc 01       	movw	r30, r24
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	e0 5a       	subi	r30, 0xA0	; 160
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	20 81       	ld	r18, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	31 83       	std	Z+1, r19	; 0x01
 184:	20 83       	st	Z, r18
	if (Released_Confidence_Level[ButtonReleased] > 500)
 186:	25 3f       	cpi	r18, 0xF5	; 245
 188:	31 40       	sbci	r19, 0x01	; 1
 18a:	5c f0       	brlt	.+22     	; 0x1a2 <ProcessReleasedButton+0x32>
	{
		Pressed[ButtonReleased] = 0;
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	fc 01       	movw	r30, r24
 192:	e4 59       	subi	r30, 0x94	; 148
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	11 82       	std	Z+1, r1	; 0x01
 198:	10 82       	st	Z, r1
		Released_Confidence_Level[0] = 0;
 19a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 19e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 1a2:	08 95       	ret

000001a4 <main>:
 int LEDNumber [2];						//array to count 2 LED lit levels
 
int main(void)
{
    //Initialization area. Setting up ports and data direction
	DDRB = 0xff;		//set PORTB for all outputs
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;		//set output low -> turn all LEDs off
 1a8:	18 ba       	out	0x18, r1	; 24
	DDRD = 0xff;		//set PORTD for for all outputs
 1aa:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;		//set output low -> turn all LEDs off
 1ac:	12 ba       	out	0x12, r1	; 18
    DDRC  = 0xff;       // use all pins on port C for input
 1ae:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;		//turn on all pull up resistors
 1b0:	85 bb       	out	0x15, r24	; 21
	//PORTC |= (1<<0);	//activate Bit 0 internal pull up resistor

		
    while (1) 
    {
		if ( ~PINC & (1<<0))		//read PINC Bit 0 to see if S0 is pressed 
 1b2:	98 99       	sbic	0x13, 0	; 19
 1b4:	04 c0       	rjmp	.+8      	; 0x1be <main+0x1a>
		{
			ProcessPressedButton(0);	//Process button clicks for side 1	
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	46 df       	rcall	.-372    	; 0x48 <ProcessPressedButton>
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <main+0x20>
		}
		else
		{
			ProcessReleasedButton(0);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	d6 df       	rcall	.-84     	; 0x170 <ProcessReleasedButton>
		}
		if ( ~PINC & (1<<3))			//read PINC Bit 3 to see if S3 is pressed 
 1c4:	9b 99       	sbic	0x13, 3	; 19
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <main+0x2c>
		{
			ProcessPressedButton(1);	//Process button clicks for side 2
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	3d df       	rcall	.-390    	; 0x48 <ProcessPressedButton>
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <main+0xe>
		}
		else
		{
			ProcessReleasedButton(1);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	cd df       	rcall	.-102    	; 0x170 <ProcessReleasedButton>
 1d6:	ed cf       	rjmp	.-38     	; 0x1b2 <main+0xe>

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
