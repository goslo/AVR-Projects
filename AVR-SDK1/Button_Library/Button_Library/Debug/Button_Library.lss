
Button_Library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000676  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000518  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a5  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033a  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 37       	cpi	r26, 0x74	; 116
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	59 d0       	rcall	.+178    	; 0xf6 <main>
  44:	98 c0       	rjmp	.+304    	; 0x176 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ButtonPressed>:
int Pressed_Confidence_Level[numberOfButtons]; //Measure button press confidence
int Released_Confidence_Level[numberOfButtons]; //Measure button release confidence

char ButtonPressed(int buttonNumber, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
{
	if (~pinOfButton & (1<<portBit))
  48:	70 e0       	ldi	r23, 0x00	; 0
  4a:	60 95       	com	r22
  4c:	70 95       	com	r23
  4e:	02 c0       	rjmp	.+4      	; 0x54 <ButtonPressed+0xc>
  50:	75 95       	asr	r23
  52:	67 95       	ror	r22
  54:	4a 95       	dec	r20
  56:	e2 f7       	brpl	.-8      	; 0x50 <ButtonPressed+0x8>
  58:	60 ff       	sbrs	r22, 0
  5a:	2a c0       	rjmp	.+84     	; 0xb0 <ButtonPressed+0x68>
	//if (~pinOfButton & (portBit<<0))
	{
		Pressed_Confidence_Level[buttonNumber] ++; //Increase Pressed Confidence
  5c:	bc 01       	movw	r22, r24
  5e:	66 0f       	add	r22, r22
  60:	77 1f       	adc	r23, r23
  62:	fb 01       	movw	r30, r22
  64:	e8 59       	subi	r30, 0x98	; 152
  66:	ff 4f       	sbci	r31, 0xFF	; 255
  68:	40 81       	ld	r20, Z
  6a:	51 81       	ldd	r21, Z+1	; 0x01
  6c:	4f 5f       	subi	r20, 0xFF	; 255
  6e:	5f 4f       	sbci	r21, 0xFF	; 255
  70:	51 83       	std	Z+1, r21	; 0x01
  72:	40 83       	st	Z, r20
		Released_Confidence_Level[buttonNumber] = 0; //Reset released button confidence since there is a button press
  74:	fb 01       	movw	r30, r22
  76:	e0 5a       	subi	r30, 0xA0	; 160
  78:	ff 4f       	sbci	r31, 0xFF	; 255
  7a:	11 82       	std	Z+1, r1	; 0x01
  7c:	10 82       	st	Z, r1
		if (Pressed_Confidence_Level[buttonNumber] > confidenceLevel) //Indicator of good button press
  7e:	24 17       	cp	r18, r20
  80:	35 07       	cpc	r19, r21
  82:	ac f5       	brge	.+106    	; 0xee <ButtonPressed+0xa6>
		{
			if (Pressed[buttonNumber] == 0)
  84:	fc 01       	movw	r30, r24
  86:	e0 59       	subi	r30, 0x90	; 144
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	20 81       	ld	r18, Z
  8c:	21 11       	cpse	r18, r1
  8e:	07 c0       	rjmp	.+14     	; 0x9e <ButtonPressed+0x56>
			{
				Pressed[buttonNumber] = 1;
  90:	fc 01       	movw	r30, r24
  92:	e0 59       	subi	r30, 0x90	; 144
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	20 83       	st	Z, r18
				return 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	08 95       	ret
			}
			//Zero it so a new pressed condition can be evaluated
			Pressed_Confidence_Level[buttonNumber] = 0;
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	fc 01       	movw	r30, r24
  a4:	e8 59       	subi	r30, 0x98	; 152
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	10 82       	st	Z, r1
		{
			Pressed[buttonNumber] = 0;
			Released_Confidence_Level[buttonNumber] = 0;
		}
	}
	return 0;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	08 95       	ret
			Pressed_Confidence_Level[buttonNumber] = 0;
		}
	}
	else
	{
		Released_Confidence_Level[buttonNumber] ++; //This works just like the pressed
  b0:	bc 01       	movw	r22, r24
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	fb 01       	movw	r30, r22
  b8:	e0 5a       	subi	r30, 0xA0	; 160
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	40 81       	ld	r20, Z
  be:	51 81       	ldd	r21, Z+1	; 0x01
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
  c4:	51 83       	std	Z+1, r21	; 0x01
  c6:	40 83       	st	Z, r20
		Pressed_Confidence_Level[buttonNumber] = 0; //Reset pressed button confidence since the button is released
  c8:	fb 01       	movw	r30, r22
  ca:	e8 59       	subi	r30, 0x98	; 152
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	11 82       	std	Z+1, r1	; 0x01
  d0:	10 82       	st	Z, r1
		if (Released_Confidence_Level[buttonNumber] > confidenceLevel)
  d2:	24 17       	cp	r18, r20
  d4:	35 07       	cpc	r19, r21
  d6:	6c f4       	brge	.+26     	; 0xf2 <ButtonPressed+0xaa>
		{
			Pressed[buttonNumber] = 0;
  d8:	fc 01       	movw	r30, r24
  da:	e0 59       	subi	r30, 0x90	; 144
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	10 82       	st	Z, r1
			Released_Confidence_Level[buttonNumber] = 0;
  e0:	fb 01       	movw	r30, r22
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	11 82       	std	Z+1, r1	; 0x01
  e8:	10 82       	st	Z, r1
		}
	}
	return 0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <main>:
#include <avr/io.h>
#include "button.h"

int main(void)
{
	DDRD = 0xff;		//set PORTD for for all outputs
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;		//set output low -> turn all LEDs off	
  fa:	12 ba       	out	0x12, r1	; 18
	DDRC = 0x00;		//set direction to all inputs
  fc:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xff;		//turn on all pull up resistors
  fe:	85 bb       	out	0x15, r24	; 21
	
	while(1) 
	{		
		//ButtonPressed(int buttonNumber, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
		
		if (ButtonPressed(0,PINC,0,100)) PORTD ^= (1<<PIND0);	//toggle bit 0 with XOR, flips from 1 to 0
 100:	01 e0       	ldi	r16, 0x01	; 1
		
		if (ButtonPressed(1,PINC,1,100)) PORTD ^= (1<<PIND1);	//toggle bit 1 with XOR, flips from 1 to 0
 102:	12 e0       	ldi	r17, 0x02	; 2
		
		if (ButtonPressed(2,PINC,2,100)) PORTD ^= (1<<PIND2);	//toggle bit 2 with XOR, flips from 1 to 0
 104:	68 94       	set
 106:	ff 24       	eor	r15, r15
 108:	f2 f8       	bld	r15, 2
	
	while(1) 
	{		
		//ButtonPressed(int buttonNumber, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
		
		if (ButtonPressed(0,PINC,0,100)) PORTD ^= (1<<PIND0);	//toggle bit 0 with XOR, flips from 1 to 0
 10a:	d0 2f       	mov	r29, r16
		
		if (ButtonPressed(1,PINC,1,100)) PORTD ^= (1<<PIND1);	//toggle bit 1 with XOR, flips from 1 to 0
 10c:	c1 2f       	mov	r28, r17
		
		if (ButtonPressed(2,PINC,2,100)) PORTD ^= (1<<PIND2);	//toggle bit 2 with XOR, flips from 1 to 0
		
		if (ButtonPressed(3,PINC,3,100)) PORTD ^= (1<<PIND3);	//toggle bit 3 with XOR, flips from 1 to 0
 10e:	68 94       	set
 110:	ee 24       	eor	r14, r14
 112:	e3 f8       	bld	r14, 3
	
	while(1) 
	{		
		//ButtonPressed(int buttonNumber, unsigned char pinOfButton, unsigned char portBit, int confidenceLevel)
		
		if (ButtonPressed(0,PINC,0,100)) PORTD ^= (1<<PIND0);	//toggle bit 0 with XOR, flips from 1 to 0
 114:	63 b3       	in	r22, 0x13	; 19
 116:	24 e6       	ldi	r18, 0x64	; 100
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	93 df       	rcall	.-218    	; 0x48 <ButtonPressed>
 122:	88 23       	and	r24, r24
 124:	19 f0       	breq	.+6      	; 0x12c <main+0x36>
 126:	82 b3       	in	r24, 0x12	; 18
 128:	80 27       	eor	r24, r16
 12a:	82 bb       	out	0x12, r24	; 18
		
		if (ButtonPressed(1,PINC,1,100)) PORTD ^= (1<<PIND1);	//toggle bit 1 with XOR, flips from 1 to 0
 12c:	63 b3       	in	r22, 0x13	; 19
 12e:	24 e6       	ldi	r18, 0x64	; 100
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	4d 2f       	mov	r20, r29
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	87 df       	rcall	.-242    	; 0x48 <ButtonPressed>
 13a:	88 23       	and	r24, r24
 13c:	19 f0       	breq	.+6      	; 0x144 <main+0x4e>
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	81 27       	eor	r24, r17
 142:	82 bb       	out	0x12, r24	; 18
		
		if (ButtonPressed(2,PINC,2,100)) PORTD ^= (1<<PIND2);	//toggle bit 2 with XOR, flips from 1 to 0
 144:	63 b3       	in	r22, 0x13	; 19
 146:	24 e6       	ldi	r18, 0x64	; 100
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	4c 2f       	mov	r20, r28
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	7b df       	rcall	.-266    	; 0x48 <ButtonPressed>
 152:	88 23       	and	r24, r24
 154:	19 f0       	breq	.+6      	; 0x15c <main+0x66>
 156:	82 b3       	in	r24, 0x12	; 18
 158:	8f 25       	eor	r24, r15
 15a:	82 bb       	out	0x12, r24	; 18
		
		if (ButtonPressed(3,PINC,3,100)) PORTD ^= (1<<PIND3);	//toggle bit 3 with XOR, flips from 1 to 0
 15c:	63 b3       	in	r22, 0x13	; 19
 15e:	24 e6       	ldi	r18, 0x64	; 100
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	43 e0       	ldi	r20, 0x03	; 3
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	6f df       	rcall	.-290    	; 0x48 <ButtonPressed>
 16a:	88 23       	and	r24, r24
 16c:	99 f2       	breq	.-90     	; 0x114 <main+0x1e>
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	8e 25       	eor	r24, r14
 172:	82 bb       	out	0x12, r24	; 18
 174:	cf cf       	rjmp	.-98     	; 0x114 <main+0x1e>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
