
Button_Push.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052f  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c2  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b2  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000104a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	22 c0       	rjmp	.+68     	; 0x7a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
{
    uint8_t   led; 
    uint8_t   keys;
    

    DDRD  = 0xff;                  // use all pins on PortD for output 
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	81 bb       	out	0x11, r24	; 17
    DDRC  = 0xff;                  // use all pins on port C for input
  3c:	84 bb       	out	0x14, r24	; 20
    
    PORTC = 0xff;                  // activate internal pull-up
  3e:	85 bb       	out	0x15, r24	; 21
    PORTD = 0x00;                  // set output low -> turn all LEDs off
  40:	12 ba       	out	0x12, r1	; 18
    
    for (;;) {                     // loop forever   
        keys = ~PINC;              // read input port with switches (active-low)
			        
        if ( keys & 1 )				//back to original code
            led = 1;
  42:	21 e0       	ldi	r18, 0x01	; 1
        else if ( keys & 2 )       // priority encoder: if multiple switches are pressed,
            led = 2;               // only the lowest switch is recognized
  44:	32 e0       	ldi	r19, 0x02	; 2
        else if ( keys & 4 )
            led = 4;
  46:	44 e0       	ldi	r20, 0x04	; 4
       else if ( keys & 8 )
            led = 8;
  48:	68 e0       	ldi	r22, 0x08	; 8
//       else if ( keys & 0x40 )     
//           led = 0x40;             
//       else if ( keys & 0x80 )      
//           led = 0x80;
        else
            led = 0;
  4a:	50 e0       	ldi	r21, 0x00	; 0
    
    PORTC = 0xff;                  // activate internal pull-up
    PORTD = 0x00;                  // set output low -> turn all LEDs off
    
    for (;;) {                     // loop forever   
        keys = ~PINC;              // read input port with switches (active-low)
  4c:	83 b3       	in	r24, 0x13	; 19
  4e:	80 95       	com	r24
			        
        if ( keys & 1 )				//back to original code
  50:	80 fd       	sbrc	r24, 0
  52:	08 c0       	rjmp	.+16     	; 0x64 <__SREG__+0x25>
            led = 1;
        else if ( keys & 2 )       // priority encoder: if multiple switches are pressed,
  54:	81 fd       	sbrc	r24, 1
  56:	08 c0       	rjmp	.+16     	; 0x68 <__SREG__+0x29>
            led = 2;               // only the lowest switch is recognized
        else if ( keys & 4 )
  58:	82 fd       	sbrc	r24, 2
  5a:	08 c0       	rjmp	.+16     	; 0x6c <__SREG__+0x2d>
            led = 4;
       else if ( keys & 8 )
  5c:	83 fd       	sbrc	r24, 3
  5e:	08 c0       	rjmp	.+16     	; 0x70 <__SREG__+0x31>
//       else if ( keys & 0x40 )     
//           led = 0x40;             
//       else if ( keys & 0x80 )      
//           led = 0x80;
        else
            led = 0;
  60:	95 2f       	mov	r25, r21
  62:	07 c0       	rjmp	.+14     	; 0x72 <__SREG__+0x33>
    
    for (;;) {                     // loop forever   
        keys = ~PINC;              // read input port with switches (active-low)
			        
        if ( keys & 1 )				//back to original code
            led = 1;
  64:	92 2f       	mov	r25, r18
  66:	05 c0       	rjmp	.+10     	; 0x72 <__SREG__+0x33>
        else if ( keys & 2 )       // priority encoder: if multiple switches are pressed,
            led = 2;               // only the lowest switch is recognized
  68:	93 2f       	mov	r25, r19
  6a:	03 c0       	rjmp	.+6      	; 0x72 <__SREG__+0x33>
        else if ( keys & 4 )
            led = 4;
  6c:	94 2f       	mov	r25, r20
  6e:	01 c0       	rjmp	.+2      	; 0x72 <__SREG__+0x33>
       else if ( keys & 8 )
            led = 8;
  70:	96 2f       	mov	r25, r22
//       else if ( keys & 0x80 )      
//           led = 0x80;
        else
            led = 0;
            
        if ( keys ) 
  72:	88 23       	and	r24, r24
  74:	59 f3       	breq	.-42     	; 0x4c <__SREG__+0xd>
            PORTD = led;           // Set corresponding LED if switch pressed
  76:	92 bb       	out	0x12, r25	; 18
  78:	e9 cf       	rjmp	.-46     	; 0x4c <__SREG__+0xd>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
