
LCD_Tester_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089d  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034c  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000222  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e2       	ldi	r30, 0x28	; 40
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ae 36       	cpi	r26, 0x6E	; 110
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	4b d0       	rcall	.+150    	; 0xe0 <main>
  4a:	6c c0       	rjmp	.+216    	; 0x124 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <LcdSendNibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	e7 e8       	ldi	r30, 0x87	; 135
  50:	f3 e1       	ldi	r31, 0x13	; 19
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <LcdSendNibble+0x4>
  56:	00 c0       	rjmp	.+0      	; 0x58 <LcdSendNibble+0xa>
  58:	00 00       	nop
void LcdSendNibble( uint8_t nibble )
{
   _delay_ms(5);

   // Output upper nibble on the data ports upper bits
   LCD_DATA_PORT = (nibble & 0xF0) | (LCD_DATA_PORT & 0x0F);
  5a:	92 b3       	in	r25, 0x12	; 18
  5c:	80 7f       	andi	r24, 0xF0	; 240
  5e:	9f 70       	andi	r25, 0x0F	; 15
  60:	89 2b       	or	r24, r25
  62:	82 bb       	out	0x12, r24	; 18

   // Toggle the E line
   LCD_CTRL_PORT |= (1<<LCD_E);   // Going up..
  64:	93 9a       	sbi	0x12, 3	; 18
   LCD_CTRL_PORT &= ~(1<<LCD_E);  // ..and down.
  66:	93 98       	cbi	0x12, 3	; 18
  68:	08 95       	ret

0000006a <LcdSendByte>:
 *
 * Returns:
 *	nothing
 */
void LcdSendByte(uint8_t theByte)
{
  6a:	cf 93       	push	r28
  6c:	c8 2f       	mov	r28, r24
   // Send the high nibble
   LcdSendNibble(theByte);
  6e:	ef df       	rcall	.-34     	; 0x4e <LcdSendNibble>

   // Shift theByte to get lower nibble in upper part...
   theByte = theByte << 4;
   // ...and send it
   LcdSendNibble(theByte);
  70:	8c 2f       	mov	r24, r28
  72:	82 95       	swap	r24
  74:	80 7f       	andi	r24, 0xF0	; 240
  76:	eb df       	rcall	.-42     	; 0x4e <LcdSendNibble>
}
  78:	cf 91       	pop	r28
  7a:	08 95       	ret

0000007c <LcdSendInstruction>:
 *	nothing
 */
void LcdSendInstruction( uint8_t theInstruction )
{
   // RS low for instructions
   LCD_CTRL_PORT &= ~(1<<LCD_RS);
  7c:	92 98       	cbi	0x12, 2	; 18

   // Send the instruction
   LcdSendByte(theInstruction);
  7e:	f5 df       	rcall	.-22     	; 0x6a <LcdSendByte>
  80:	08 95       	ret

00000082 <LcdSendCharacter>:
 *	nothing
 */
void LcdSendCharacter(uint8_t theChar)
{
   // RS high for characters to display
   LCD_CTRL_PORT |= (1<<LCD_RS);
  82:	92 9a       	sbi	0x12, 2	; 18

   // Send the command
   LcdSendByte(theChar);
  84:	f2 df       	rcall	.-28     	; 0x6a <LcdSendByte>
  86:	08 95       	ret

00000088 <LcdInitialize>:
 *	nothing
 */
void LcdInitialize(void)
{
   // initialize LCD control lines
   LCD_CTRL_PORT &= ~(1<<LCD_RS);	// RS low
  88:	92 98       	cbi	0x12, 2	; 18
   LCD_CTRL_PORT &= ~(1<<LCD_RW);	// R/W low
  8a:	91 98       	cbi	0x12, 1	; 18
   LCD_CTRL_PORT &= ~(1<<LCD_E);	// E low
  8c:	93 98       	cbi	0x12, 3	; 18

   // initialize LCD control lines to output
   LCD_CTRL_DDR |= (1<<LCD_RS);
  8e:	8a 9a       	sbi	0x11, 2	; 17
   LCD_CTRL_DDR |= (1<<LCD_RW);
  90:	89 9a       	sbi	0x11, 1	; 17
   LCD_CTRL_DDR |= (1<<LCD_E);
  92:	8b 9a       	sbi	0x11, 3	; 17

   // initialize LCD data port to input
   LCD_DATA_DDR |= 0xF0;      // Data on high four bits of port for now...
  94:	81 b3       	in	r24, 0x11	; 17
  96:	80 6f       	ori	r24, 0xF0	; 240
  98:	81 bb       	out	0x11, r24	; 17
  9a:	87 e9       	ldi	r24, 0x97	; 151
  9c:	9a e3       	ldi	r25, 0x3A	; 58
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LcdInitialize+0x16>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LcdInitialize+0x1c>
  a4:	00 00       	nop
   // First part of init sequence is 3 x Function Set with
   // stipulated waits. Note that the display is in 8-bit mode
   // initially, but although the four low data lines are not connected
   // this does not matter as the instructions low nibble is zero anyway.
   _delay_ms(15);
   LcdSendNibble( LCD_FUNCTION_SET );
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	d2 df       	rcall	.-92     	; 0x4e <LcdSendNibble>
  aa:	87 e8       	ldi	r24, 0x87	; 135
  ac:	93 e1       	ldi	r25, 0x13	; 19
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <LcdInitialize+0x26>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <LcdInitialize+0x2c>
  b4:	00 00       	nop
   _delay_ms(5);
   LcdSendNibble( LCD_FUNCTION_SET );
  b6:	88 e3       	ldi	r24, 0x38	; 56
  b8:	ca df       	rcall	.-108    	; 0x4e <LcdSendNibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	95 e8       	ldi	r25, 0x85	; 133
  bc:	9a 95       	dec	r25
  be:	f1 f7       	brne	.-4      	; 0xbc <LcdInitialize+0x34>
  c0:	00 00       	nop
   _delay_us(100);
   LcdSendNibble( LCD_FUNCTION_SET );
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	c4 df       	rcall	.-120    	; 0x4e <LcdSendNibble>

   // Now, still in 8-bit mode, set the display to 4-bit mode
   LcdSendNibble( LCD_FUNCTION_SET_4BIT );
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	c2 df       	rcall	.-124    	; 0x4e <LcdSendNibble>

   // We are now in 4-bit mode.
   // Do the rest of the init sequence.
   LcdSendInstruction( LCD_FUNCTION_SET_4BIT );
  ca:	88 e2       	ldi	r24, 0x28	; 40
  cc:	d7 df       	rcall	.-82     	; 0x7c <LcdSendInstruction>
   LcdSendInstruction( LCD_DISPLAY_OFF );
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	d5 df       	rcall	.-86     	; 0x7c <LcdSendInstruction>
   LcdSendInstruction( LCD_DISPLAY_CLEAR );
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	d3 df       	rcall	.-90     	; 0x7c <LcdSendInstruction>
   LcdSendInstruction( LCD_ENTRY_MODE_SET );
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	d1 df       	rcall	.-94     	; 0x7c <LcdSendInstruction>
   LcdSendInstruction( LCD_DISPLAY_ON );
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	cf df       	rcall	.-98     	; 0x7c <LcdSendInstruction>
  de:	08 95       	ret

000000e0 <main>:

char message[] = "4-bit avr-gcc";


int main(void)
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <main+0x6>
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
   LcdInitialize();
  ea:	ce df       	rcall	.-100    	; 0x88 <LcdInitialize>

   volatile int i = 0;
  ec:	1a 82       	std	Y+2, r1	; 0x02
  ee:	19 82       	std	Y+1, r1	; 0x01
   while (message[i] != 0)
  f0:	e9 81       	ldd	r30, Y+1	; 0x01
  f2:	fa 81       	ldd	r31, Y+2	; 0x02
  f4:	e0 5a       	subi	r30, 0xA0	; 160
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	91 f0       	breq	.+36     	; 0x122 <main+0x42>
	{
	   LcdSendCharacter(message[i]);
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 81       	ld	r24, Z
 108:	bc df       	rcall	.-136    	; 0x82 <LcdSendCharacter>
		i++;
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
int main(void)
{
   LcdInitialize();

   volatile int i = 0;
   while (message[i] != 0)
 114:	e9 81       	ldd	r30, Y+1	; 0x01
 116:	fa 81       	ldd	r31, Y+2	; 0x02
 118:	e0 5a       	subi	r30, 0xA0	; 160
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	81 11       	cpse	r24, r1
 120:	ee cf       	rjmp	.-36     	; 0xfe <main+0x1e>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x42>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
