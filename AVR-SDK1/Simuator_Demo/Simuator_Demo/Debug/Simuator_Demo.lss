
Simuator_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000011e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000536  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c6  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000204  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c5  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	30 c0       	rjmp	.+96     	; 0xa6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
int i;

int main(void)
{
	
	DDRD = 0xff;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	81 bb       	out	0x11, r24	; 17
	PORTD =0x00;
  4c:	12 ba       	out	0x12, r1	; 18
	LED_NUM = 0;
  4e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <LED_NUM>

    while (1)
	{
	 PORTD |= 1 << LED_NUM;
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	50 e0       	ldi	r21, 0x00	; 0
			{
				for (i=0;i < 10;i++)
				{
					PORTD = 0x00;
					//_delay_ms(10);
					PORTD = 0xff;
  56:	3f ef       	ldi	r19, 0xFF	; 255
	PORTD =0x00;
	LED_NUM = 0;

    while (1)
	{
	 PORTD |= 1 << LED_NUM;
  58:	22 b3       	in	r18, 0x12	; 18
  5a:	ca 01       	movw	r24, r20
  5c:	00 90 62 00 	lds	r0, 0x0062	; 0x800062 <LED_NUM>
  60:	02 c0       	rjmp	.+4      	; 0x66 <main+0x1e>
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	0a 94       	dec	r0
  68:	e2 f7       	brpl	.-8      	; 0x62 <main+0x1a>
  6a:	82 2b       	or	r24, r18
  6c:	82 bb       	out	0x12, r24	; 18
	 LED_NUM ++;
  6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <LED_NUM>
  72:	8f 5f       	subi	r24, 0xFF	; 255
  74:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <LED_NUM>
	 	if (LED_NUM >7)
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	70 f3       	brcs	.-36     	; 0x58 <main+0x10>
			{
				for (i=0;i < 10;i++)
  7c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				{
					PORTD = 0x00;
  84:	12 ba       	out	0x12, r1	; 18
					//_delay_ms(10);
					PORTD = 0xff;
  86:	32 bb       	out	0x12, r19	; 18
	{
	 PORTD |= 1 << LED_NUM;
	 LED_NUM ++;
	 	if (LED_NUM >7)
			{
				for (i=0;i < 10;i++)
  88:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  9a:	0a 97       	sbiw	r24, 0x0a	; 10
  9c:	9c f3       	brlt	.-26     	; 0x84 <main+0x3c>
					PORTD = 0x00;
					//_delay_ms(10);
					PORTD = 0xff;
					//_delay_ms(10);
				}
				LED_NUM = 0;
  9e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <LED_NUM>
				PORTD = 0x00;
  a2:	12 ba       	out	0x12, r1	; 18
  a4:	d9 cf       	rjmp	.-78     	; 0x58 <main+0x10>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
